#! /bin/bash
#
# Copyright 2009-2021 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).
#
# This script will set up a brand new Ubuntu machine as a LP developer
# workstation, from scratch. The script lives in the LP codebase itself,
# as utilities/rocketfuel-setup

DO_WORKSPACE=1
INSTALL_POSTGRES_14=0
INSTALL_POSTGRES_16=0
INSTALL_OPTS=""
getopt_output="$(getopt -o '' -l no-workspace,postgres14,postgres16,lpusername:,assume-yes -- "$@")" || exit 1
eval set -- "$getopt_output"
while :; do
  case $1 in
    --no-workspace)
        DO_WORKSPACE=0
        shift
        ;;
    --postgres14)
        INSTALL_POSTGRES_14=1
        shift
        ;;
    --postgres16)
        INSTALL_POSTGRES_16=1
        shift
        ;;
    --lpusername)
        lpusername=$2
        echo "Using username $lpusername for Launchpad"
        shift
        ;;
    --assume-yes)
        echo "Installing packages without prompting"
        INSTALL_OPTS="-y"
        shift
        ;;
    -- | *) shift; break ;;
    esac
done

if [ -z "$lpusername" ]; then
  # Establish LP username
  whoami=$(whoami)
  printf "What is your Launchpad username? [%s] " "$whoami"
  read -r lpusername
  if [ -z "$lpusername" ]; then
    lpusername=${whoami}
  fi
fi

# Make sure you have all the needed virtual hosts

dev_host() {
  if ! grep -q "^127.0.0.88.* ${hostname}" /etc/hosts; then
    sudo sed -i "s/^127.0.0.88.*$/&\ ${hostname}/" /etc/hosts
    echo "${hostname} added to /etc/hosts"
  fi
  }

if ! grep -q "^127.0.0.88" /etc/hosts; then
  echo "Adding development hosts on local machine"
  echo "
# Launchpad virtual domains. This should be on one line.
127.0.0.88      launchpad.test
" | sudo tee -a /etc/hosts > /dev/null
  echo "launchpad.test added to /etc/hosts"
fi

hostnames=$(cat <<EOF
    answers.launchpad.test
    archive.launchpad.test
    api.launchpad.test
    bazaar.launchpad.test
    bazaar-internal.launchpad.test
    blueprints.launchpad.test
    bugs.launchpad.test
    code.launchpad.test
    feeds.launchpad.test
    keyserver.launchpad.test
    lists.launchpad.test
    ppa.launchpad.test
    private-ppa.launchpad.test
    testopenid.test
    translations.launchpad.test
    xmlrpc-private.launchpad.test
    xmlrpc.launchpad.test
EOF
    )

for hostname in $hostnames; do
  dev_host;
done

sudo add-apt-repository ppa:launchpad/ppa

do_install() {
  if ! dpkg -s "$pkg" | grep -q "^Status: install ok installed"; then
    echo "Installing $pkg package..."
    if ! sudo apt install $INSTALL_OPTS "$pkg"; then
      echo "Unable to install $pkg."
      exit 1
    fi
  fi
  }

sudo apt update
REQUIRED_PACKAGES="launchpad-developer-dependencies apache2 libapache2-mod-wsgi-py3"
if [ $INSTALL_POSTGRES_14 == 1 ]; then
  sudo add-apt-repository ppa:launchpad/postgresql-14-ports
  REQUIRED_PACKAGES="launchpad-database-dependencies-14 ${REQUIRED_PACKAGES}"
elif [ $INSTALL_POSTGRES_16 == 1 ]; then
  sudo add-apt-repository ppa:launchpad/postgresql-16-ports
  REQUIRED_PACKAGES="launchpad-database-dependencies-16 ${REQUIRED_PACKAGES}"
fi
for pkg in $REQUIRED_PACKAGES; do
  do_install;
done

# Create the document root(s) to avoid Apache warnings
mkdir -p /var/tmp/bazaar.launchpad.test/static
mkdir -p /var/tmp/bazaar.launchpad.test/mirrors

if ! sudo a2enmod proxy > /dev/null; then
  echo "ERROR: Unable to enable proxy module in Apache2"
  exit 1
fi

if ! sudo a2enmod proxy_http > /dev/null; then
  echo "ERROR: Unable to enable proxy_http module in Apache2"
  exit 1
fi

if ! sudo a2enmod rewrite > /dev/null; then
  echo "ERROR: Unable to enable rewrite module in Apache2"
  exit 1
fi

if ! sudo a2enmod ssl > /dev/null; then
  echo "ERROR: Unable to enable ssl module in Apache2"
  exit 1
fi

if ! sudo a2enmod deflate > /dev/null; then
  echo "ERROR: Unable to enable deflate module in Apache2"
  exit 1
fi

if ! sudo a2enmod headers > /dev/null; then
  echo "ERROR: Unable to enable headers module in Apache2"
  exit 1
fi

if ! sudo a2enmod wsgi > /dev/null; then
  echo "ERROR: Unable to enable wsgi module in Apache2"
  exit 1
fi

if [ $DO_WORKSPACE == 0 ]; then
  cat <<EOT
Branches have not been created, as requested.  You will need to do some or all
of the following steps:
$ git clone lp:launchpad
$ cd launchpad
$ git clone --depth=1 lp:lp-source-dependencies download-cache
$ utilities/launchpad-database-setup
$ make schema
$ sudo make install
EOT
  exit 0
fi

if [ ! -e "$HOME/.rocketfuel-env.sh" ]; then
  echo "# Common environment variables for the rocketfuel-* scripts.
#
# The ones you can set are:
#
# LP_PROJECT_ROOT - The root directory of all your Launchpad stuff.  Your
#                   Launchpad repository will live in a child directory
#                   of this directory.
# LP_TRUNK_NAME   - The directory name (not path!) to your rocketfuel trunk
#                   mirror directory.  This is relative to your
#                   LP_PROJECT_ROOT.
# LP_SOURCEDEPS_DIR - The name of the directory (not path!) where your
#                   trunk sourcecode will be placed.  This is relative to your
#                   LP_PROJECT_ROOT and should /not/ have the 'sourcecode'
#                   path appended to it, since this is automatically added by
#                   the scripts.

LP_PROJECT_ROOT=\${LP_PROJECT_ROOT:=~/launchpad}
LP_TRUNK_NAME=\${LP_TRUNK_NAME:=launchpad}
LP_TRUNK_PATH=\$LP_PROJECT_ROOT/\$LP_TRUNK_NAME

LP_SOURCEDEPS_DIR=\${LP_SOURCEDEPS_DIR:=lp-sourcedeps}
" > "$HOME/.rocketfuel-env.sh"
fi

# shellcheck disable=SC1091
if ! source "$HOME/.rocketfuel-env.sh"; then
    echo "Something went wrong with rocketfuel-setup!"
    exit 1
fi


# Create the local branch structure we will use for managing Launchpad code
mkdir -p "$LP_PROJECT_ROOT"
cd "$LP_PROJECT_ROOT" || exit 1

# Make sure "git clone lp:..." works.
echo "Configuring git..."
if [ "$(git ls-remote --get-url lp:launchpad)" = lp:launchpad ]; then
  if [ "$(curl --fail --silent "https://launchpad.net/~$lpusername/+sshkeys")" ]; then
    git config --global "url.git+ssh://$lpusername@git.launchpad.net/.insteadof" lp:
  else
    git config --global url.https://git.launchpad.net/.insteadof lp:
  fi
fi

cd "$LP_PROJECT_ROOT" || exit 1
if [ ! -d "$LP_TRUNK_NAME" ]; then
  echo "Making local clone of Launchpad; this may take a while..."
  if ! git clone lp:launchpad "$LP_TRUNK_NAME"; then
    echo "ERROR: Unable to create local clone of Launchpad"
    exit 1
  fi
fi

cd "$LP_TRUNK_NAME" || exit 1
if ! git status; then
  echo "ERROR: Your clone in $LP_TRUNK_PATH is corrupted.
       Please delete $LP_TRUNK_PATH and run rocketfuel-setup again."
       exit 1
fi
if [[ "$(git remote get-url origin)" != *"//git.launchpad.net/launchpad" ]]; then
  echo "ERROR: Your clone in $LP_TRUNK_PATH has an incorrect pull location, correcting now..."
  if ! git remote set-url origin "git+ssh://$lpusername@git.launchpad.net/launchpad"; then
    echo "ERROR: Unable to set trunk pull location to lp:launchpad"
    exit 1
  fi
fi

# Call the newly minted Launchpad branch's 'make install' target to do some
# more apache setup.
if ! sudo make install > /dev/null; then
  echo "ERROR: Unable to install apache config appropriately"
  exit 1
fi


# Set up scripts in /usr/local/bin
cd /usr/local/bin || exit 1
if [ ! -e rocketfuel-get ]; then
  sudo ln -s "$LP_TRUNK_PATH/utilities/rocketfuel-get"
fi
if [ "$(readlink rocketfuel-get)" != "$LP_TRUNK_PATH/utilities/rocketfuel-get" ]; then
  echo "WARNING: /usr/local/bin/rocketfuel-get should be deleted so I can
         recreate it."
fi
if [ ! -e rocketfuel-setup ]; then
  sudo ln -s "$LP_TRUNK_PATH/utilities/rocketfuel-setup"
fi
if [ "$(readlink rocketfuel-setup)" != "$LP_TRUNK_PATH/utilities/rocketfuel-setup" ]; then
  echo "WARNING: /usr/local/bin/rocketfuel-setup should be deleted so I can
         recreate it."
fi


# Make sure we have all the right code in place for source dependencies
/usr/local/bin/rocketfuel-get

echo "
Thank you for using this script.  You can improve it for everyone by
committing changes to Launchpad in utilities/rocketfuel-setup.

Please see https://documentation.ubuntu.com/launchpad/en/latest/ for more
information on developing and testing Launchpad, and on submitting changes.

You can use the following commands to manage your Launchpad
development environment:

 rocketfuel-get
    Update your copy of $LP_TRUNK_NAME and the necessary source
    dependencies, and make sure all source dependencies are properly
    linked in to all the branches you are working on.

Consider installing pre-commit (https://pre-commit.com/) as a git hook to
take advantage of some extra checks when committing:

 $ pre-commit install

Happy hacking!
"
