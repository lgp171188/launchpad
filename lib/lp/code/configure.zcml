<!-- Copyright 2009 Canonical Ltd.  This software is licensed under the
     GNU Affero General Public License version 3 (see the file LICENSE).
-->

<configure
    xmlns="http://namespaces.zope.org/zope"
    xmlns:browser="http://namespaces.zope.org/browser"
    xmlns:i18n="http://namespaces.zope.org/i18n"
    xmlns:lp="http://namespaces.canonical.com/lp"
    xmlns:xmlrpc="http://namespaces.zope.org/xmlrpc"
    xmlns:webservice="http://namespaces.canonical.com/webservice"
    i18n_domain="launchpad">
  <include package=".browser"/>
  <include package=".vocabularies"/>
  <lp:authorizations module=".security" />

  <publisher
      name="code"
      factory="lp.code.publisher.code_request_publication_factory"/>
  <utility
      component="lp.code.publisher.CodeLayer"
      provides="zope.publisher.interfaces.browser.IDefaultBrowserLayer"
      name="code" />
  <utility
      component="lp.code.publisher.BranchesFacet"
      provides="lp.services.webapp.interfaces.IFacet"
      name="branches" />

  <class class="lp.code.model.codereviewvote.CodeReviewVoteReference">
    <allow interface="lp.code.interfaces.codereviewvote.ICodeReviewVoteReferencePublic"/>
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.codereviewvote.ICodeReviewVoteReferenceEdit"/>
  </class>
  <subscriber
      for="lp.code.interfaces.codereviewvote.ICodeReviewVoteReference
           lp.code.interfaces.event.IReviewerNominatedEvent"
      handler="lp.code.subscribers.branchmergeproposal.review_requested"/>

  <!-- CodeImportMachine -->

  <class class="lp.code.model.codeimportmachine.CodeImportMachine">
    <implements interface="lp.code.interfaces.codeimportmachine.ICodeImportMachine"/>
    <allow attributes="
                    id
                    state
                    hostname
                    current_jobs
                    date_created
                    heartbeat
                    events
                    shouldLookForJob"/>
    <require permission="launchpad.Edit"
             attributes="
                         setOnline
                         setOffline
                         setQuiescing"/>

    <!-- ICodeImportMachine has no set_schema, because all modifications
         should be done through methods that create CodeImportEvent objects when
         appropriate. -->
  </class>

  <!-- CodeImportMachineSet -->

  <lp:securedutility
      class="lp.code.model.codeimportmachine.CodeImportMachineSet"
      provides="lp.code.interfaces.codeimportmachine.ICodeImportMachineSet">
    <allow interface="lp.code.interfaces.codeimportmachine.ICodeImportMachineSet"/>
  </lp:securedutility>

  <!-- BranchRef -->

  <class class="lp.code.browser.branchref.BranchRef">
    <allow interface="lp.code.interfaces.branchref.IBranchRef"/>
  </class>

  <!-- static content view -->

  <class class="lp.code.browser.branchref.StaticContentView">
    <allow attributes="browserDefault
                       __call__"/>
  </class>
  <class class="lp.code.model.branchcollection.GenericBranchCollection">
    <allow interface="lp.code.interfaces.branchcollection.IBranchCollection"/>
  </class>
  <class class="lp.code.model.branchcollection.AnonymousBranchCollection">
    <allow interface="lp.code.interfaces.branchcollection.IBranchCollection"/>
  </class>
  <class class="lp.code.model.branchcollection.VisibleBranchCollection">
    <allow interface="lp.code.interfaces.branchcollection.IBranchCollection"/>
  </class>
  <adapter
      for="storm.store.Store"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.model.branchcollection.GenericBranchCollection"/>
  <adapter
      for="lp.registry.interfaces.person.IPerson"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_person"/>
  <adapter
      for="lp.registry.interfaces.product.IProduct"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_product"/>
  <adapter
      for="lp.registry.interfaces.personproduct.IPersonProduct"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_person_product"/>
  <adapter
      for="lp.registry.interfaces.projectgroup.IProjectGroup"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_project_group"/>
  <adapter
      for="lp.registry.interfaces.distribution.IDistribution"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_distribution"/>
  <adapter
      for="lp.registry.interfaces.distroseries.IDistroSeries"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_distro_series"/>
  <adapter
      for="lp.registry.interfaces.sourcepackage.ISourcePackage"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_source_package"/>
  <adapter
      for="lp.registry.interfaces.distributionsourcepackage.IDistributionSourcePackage"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_distro_source_package"/>
  <lp:securedutility
      class="lp.code.model.branchcollection.GenericBranchCollection"
      provides="lp.code.interfaces.branchcollection.IAllBranches">
    <allow interface="lp.code.interfaces.branchcollection.IAllBranches"/>
  </lp:securedutility>
  <class class="lp.code.model.revisioncache.GenericRevisionCollection">
    <allow interface="lp.code.interfaces.revisioncache.IRevisionCollection"/>
  </class>
  <lp:securedutility
      class="lp.code.model.revisioncache.GenericRevisionCollection"
      provides="lp.code.interfaces.revisioncache.IRevisionCache">
    <allow interface="lp.code.interfaces.revisioncache.IRevisionCache"/>
  </lp:securedutility>
  <adapter
      for="lp.registry.interfaces.person.IPerson"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_person"/>
  <adapter
      for="lp.registry.interfaces.product.IProduct"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_product"/>
  <adapter
      for="lp.registry.interfaces.projectgroup.IProjectGroup"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_project_group"/>
  <adapter
      for="lp.registry.interfaces.distribution.IDistribution"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_distribution"/>
  <adapter
      for="lp.registry.interfaces.distroseries.IDistroSeries"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_distro_series"/>
  <adapter
      for="lp.registry.interfaces.sourcepackage.ISourcePackage"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_source_package"/>
  <adapter
      for="lp.registry.interfaces.distributionsourcepackage.IDistributionSourcePackage"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_distro_source_package"/>
  <lp:securedutility
      class="lp.code.model.branchpuller.BranchPuller"
      provides="lp.code.interfaces.branchpuller.IBranchPuller">
    <allow interface="lp.code.interfaces.branchpuller.IBranchPuller"/>
  </lp:securedutility>
  <lp:securedutility
      class="lp.systemhomes.BazaarApplication"
      provides="lp.code.interfaces.codehosting.IBazaarApplication">
    <allow interface="lp.code.interfaces.codehosting.IBazaarApplication"/>
  </lp:securedutility>

  <!-- pages for the bazaar application -->

  <xmlrpc:view
      for="lp.code.interfaces.codehosting.IBazaarApplication"
      interface="lp.code.xmlrpc.branch.IPublicCodehostingAPI"
      class="lp.code.xmlrpc.branch.PublicCodehostingAPI"
      permission="zope.Public"/>

  <!-- Branch Merge Proposal -->

  <class class="lp.code.model.branchmergeproposal.BranchMergeProposal">
    <allow
        interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalPublic"/>
    <allow interface="lp.code.interfaces.branchtarget.IHasBranchTarget"/>
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalView"/>
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalEdit"
        set_attributes="description whiteboard merged_revno commit_message
                        root_message_id prerequisite_branch
                        prerequisite_git_repository prerequisite_git_path
                        prerequisite_git_commit_sha1"/>
    <require
        permission="launchpad.AnyAllowedPerson"
        interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalAnyAllowedPerson"/>
  </class>

  <!-- Branch Merge Proposal Jobs -->

  <class class="lp.code.model.branchmergeproposaljob.MergeProposalNeedsReviewEmailJob">
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob"/>
    <allow interface="lp.code.interfaces.branchmergeproposal.IMergeProposalNeedsReviewEmailJob"/>
  </class>
  <lp:securedutility
      component="lp.code.model.branchmergeproposaljob.MergeProposalNeedsReviewEmailJob"
      provides="lp.code.interfaces.branchmergeproposal.IMergeProposalNeedsReviewEmailJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.IMergeProposalNeedsReviewEmailJobSource"/>
  </lp:securedutility>

  <lp:securedutility
      component="lp.code.model.branchmergeproposaljob.BranchMergeProposalJobSource"
      provides="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJobSource"/>
  </lp:securedutility>

  <class
  class="lp.code.model.branchmergeproposaljob.GenerateIncrementalDiffJob">
    <allow interface="lp.code.interfaces.branchmergeproposal.IGenerateIncrementalDiffJob"/>
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob" />
  </class>
  <class class="lp.code.model.branchmergeproposaljob.UpdatePreviewDiffJob">
    <allow interface="lp.code.interfaces.branchmergeproposal.IUpdatePreviewDiffJob" />
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob" />
  </class>
  <lp:securedutility
      component="lp.code.model.branchmergeproposaljob.UpdatePreviewDiffJob"
      provides="lp.code.interfaces.branchmergeproposal.IUpdatePreviewDiffJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.IUpdatePreviewDiffJobSource"/>
  </lp:securedutility>

  <class class="lp.code.model.branchmergeproposaljob.CodeReviewCommentEmailJob">
    <allow interface="lp.code.interfaces.branchmergeproposal.ICodeReviewCommentEmailJob" />
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob" />
  </class>
  <lp:securedutility
      component="lp.code.model.branchmergeproposaljob.CodeReviewCommentEmailJob"
      provides="lp.code.interfaces.branchmergeproposal.ICodeReviewCommentEmailJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.ICodeReviewCommentEmailJobSource"/>
  </lp:securedutility>

  <class class="lp.code.model.branchmergeproposaljob.ReviewRequestedEmailJob">
    <allow interface="lp.code.interfaces.branchmergeproposal.IReviewRequestedEmailJob" />
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob" />
  </class>
  <lp:securedutility
      component="lp.code.model.branchmergeproposaljob.ReviewRequestedEmailJob"
      provides="lp.code.interfaces.branchmergeproposal.IReviewRequestedEmailJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.IReviewRequestedEmailJobSource"/>
  </lp:securedutility>

  <class class="lp.code.model.branchmergeproposaljob.MergeProposalUpdatedEmailJob">
    <allow interface="lp.services.job.interfaces.job.IRunnableJob" />
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob" />
  </class>
  <lp:securedutility
      component="lp.code.model.branchmergeproposaljob.MergeProposalUpdatedEmailJob"
      provides="lp.code.interfaces.branchmergeproposal.IMergeProposalUpdatedEmailJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.IMergeProposalUpdatedEmailJobSource"/>
  </lp:securedutility>

  <!-- Branch Merge Proposal Subscribers -->

  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lazr.lifecycle.interfaces.IObjectCreatedEvent"
      handler="lp.code.subscribers.branchmergeproposal.merge_proposal_created"/>
  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lp.code.interfaces.event.IBranchMergeProposalNeedsReviewEvent"
      handler="lp.code.subscribers.branchmergeproposal.merge_proposal_needs_review"/>
  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lazr.lifecycle.interfaces.IObjectModifiedEvent"
      handler="lp.code.subscribers.branchmergeproposal.merge_proposal_modified"/>
  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lazr.lifecycle.interfaces.IObjectDeletedEvent"
      handler="lp.code.subscribers.branchmergeproposal.merge_proposal_deleted"/>
  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lazr.lifecycle.interfaces.IObjectCreatedEvent"
      handler="lp.code.subscribers.karma.branch_merge_proposed"/>
  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lazr.lifecycle.interfaces.IObjectModifiedEvent"
      handler="lp.code.subscribers.karma.branch_merge_modified"/>
  <subscriber
      for="lp.code.interfaces.codereviewcomment.ICodeReviewComment
          lazr.lifecycle.interfaces.IObjectCreatedEvent"
      handler="lp.code.subscribers.branchmergeproposal.review_comment_created"/>

  <!-- hierarchy -->

  <lp:securedutility
      class="lp.code.model.branchmergeproposal.BranchMergeProposalGetter"
      provides="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalGetter">
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalGetter"/>
  </lp:securedutility>
  <class
      class="lp.code.model.seriessourcepackagebranch.SeriesSourcePackageBranch">
    <allow interface="lp.code.interfaces.seriessourcepackagebranch.ISeriesSourcePackageBranch"/>
  </class>

  <lp:securedutility
     class="lp.code.model.seriessourcepackagebranch.SeriesSourcePackageBranchSet"
     provides="lp.code.interfaces.seriessourcepackagebranch.IFindOfficialBranchLinks">
    <allow interface="lp.code.interfaces.seriessourcepackagebranch.IFindOfficialBranchLinks"/>
  </lp:securedutility>

  <!-- CodeImportResult -->

  <class class="lp.code.model.codeimportresult.CodeImportResult">
    <allow interface="lp.code.interfaces.codeimportresult.ICodeImportResult"/>
  </class>

  <!-- CodeImportResultSet -->

  <lp:securedutility
      class="lp.code.model.codeimportresult.CodeImportResultSet"
      provides="lp.code.interfaces.codeimportresult.ICodeImportResultSet">
    <allow interface="lp.code.interfaces.codeimportresult.ICodeImportResultSet"/>
  </lp:securedutility>
  <class class="lp.code.model.branchlookup.BranchLookup">
    <allow interface="lp.code.interfaces.branchlookup.IBranchLookup"/>
  </class>
  <lp:securedutility
      class="lp.code.model.branchlookup.BranchLookup"
      provides="lp.code.interfaces.branchlookup.IBranchLookup">
    <allow interface="lp.code.interfaces.branchlookup.IBranchLookup"/>
  </lp:securedutility>
  <lp:securedutility
      class="lp.code.model.branchlookup.LinkedBranchTraverser"
      provides="lp.code.interfaces.branchlookup.ILinkedBranchTraverser">
    <allow interface="lp.code.interfaces.branchlookup.ILinkedBranchTraverser"/>
  </lp:securedutility>
  <adapter factory="lp.code.model.branchlookup.ProductTraversable" />
  <adapter factory="lp.code.model.branchlookup.DistributionTraversable" />
  <adapter factory="lp.code.model.branchlookup.DistroSeriesTraversable" />

  <!-- BranchSubscription -->

  <class class="lp.code.model.branchsubscription.BranchSubscription">
    <allow interface="lp.code.interfaces.branchsubscription.IBranchSubscription"/>
    <allow interface="lp.code.interfaces.branchtarget.IHasBranchTarget"/>
    <require
        permission="launchpad.Edit"
        set_schema="lp.code.interfaces.branchsubscription.IBranchSubscription"/>
  </class>

  <!-- Branch -->

  <class class="lp.code.model.branch.Branch">
    <require
        permission="launchpad.View"
        interface="lp.app.interfaces.launchpad.IPrivacy
                   lp.code.interfaces.branch.IBranchAnyone
                   lp.code.interfaces.branch.IBranchModerateAttributes
                   lp.code.interfaces.branch.IBranchEditableAttributes
                   lp.code.interfaces.branch.IBranchPublic
                   lp.code.interfaces.branch.IBranchView"/>
    <require
        permission="launchpad.Moderate"
        interface="lp.code.interfaces.branch.IBranchModerate"
        set_schema="lp.code.interfaces.branch.IBranchModerateAttributes" />
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.branch.IBranchEdit"
        set_schema="lp.code.interfaces.branch.IBranchEditableAttributes"
        attributes="setPrivate"
        set_attributes="branch_format control_format repository_format
                        branch_type
                        last_scanned last_scanned_id
                        last_mirrored last_mirrored_id next_mirror_time
                        revision_count mirror_failures
                        stacked_on mirror_status_message"/>
    <require
        permission="launchpad.AnyPerson"
        set_schema="lp.code.interfaces.branch.IBranchAnyone"/>
    <require
        permission="zope.Public"
        set_schema="lp.code.interfaces.branch.IBranchPublic"/>
  </class>
  <adapter
      for="lp.code.interfaces.branch.IBranch"
      provides="lp.services.webapp.interfaces.ILaunchpadContainer"
      factory="lp.code.publisher.LaunchpadBranchContainer"/>
  <adapter
      for="lp.code.interfaces.branch.IBranch"
      provides="lp.app.browser.badge.IHasBadges"
      factory="lp.code.browser.branchlisting.BranchBadges"/>

  <subscriber
      for="lp.code.interfaces.branch.IBranch
           lazr.lifecycle.interfaces.IObjectCreatedEvent"
      handler="lp.code.subscribers.karma.branch_created"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.email.queue_tip_changed_email_jobs"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.bzrsync.schedule_diff_updates"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.bzrsync.schedule_translation_templates_build"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.bzrsync.schedule_translation_upload"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.bzrsync.update_recipes"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.bzrsync.update_snaps"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.bzrsync.trigger_webhooks"/>
  <subscriber
      for="lp.codehosting.scanner.events.IRevisionsRemoved"
      handler="lp.codehosting.scanner.email.send_removed_revision_emails"/>
  <subscriber
      for="lp.codehosting.scanner.events.INewMainlineRevisions"
      handler="lp.codehosting.scanner.buglinks.got_new_mainline_revisions"/>
  <subscriber
      for="lp.codehosting.scanner.events.IScanCompleted"
      handler="lp.codehosting.scanner.mergedetection.auto_merge_proposals"/>
  <subscriber
      for="lp.codehosting.scanner.events.IScanCompleted"
      handler="lp.codehosting.scanner.mergedetection.auto_merge_branches"/>

  <!-- BranchSet -->

  <class class="lp.code.model.branch.BranchSet">
    <allow interface="lp.code.interfaces.branch.IBranchSet"/>
  </class>
  <lp:securedutility
      class="lp.code.model.branch.BranchSet"
      provides="lp.code.interfaces.branch.IBranchSet">
    <allow interface="lp.code.interfaces.branch.IBranchSet"/>
  </lp:securedutility>

  <!-- BranchListingQueryOptimiser -->

  <class class="lp.code.model.branchlistingqueryoptimiser.BranchListingQueryOptimiser">
    <allow interface="lp.code.interfaces.branch.IBranchListingQueryOptimiser"/>
  </class>
  <lp:securedutility
      class="lp.code.model.branchlistingqueryoptimiser.BranchListingQueryOptimiser"
      provides="lp.code.interfaces.branch.IBranchListingQueryOptimiser">
    <allow interface="lp.code.interfaces.branch.IBranchListingQueryOptimiser"/>
  </lp:securedutility>

  <!-- BranchDelta -->

  <class class="lp.code.adapters.branch.BranchDelta">
    <allow interface="lp.code.interfaces.branch.IBranchDelta"/>
  </class>
  <lp:securedutility
      class="lp.code.model.branchcloud.BranchCloud"
      provides="lp.code.interfaces.branch.IBranchCloud">
    <allow interface="lp.code.interfaces.branch.IBranchCloud"/>
  </lp:securedutility>

  <subscriber
      for="lp.code.interfaces.branch.IBranch
           lazr.lifecycle.interfaces.IObjectModifiedEvent"
      handler="lp.code.model.branch.branch_modified_subscriber"/>
  <class class="lp.code.mail.branch.RecipientReason">
    <allow attributes="
                    getReason
                    branch
                    mail_header
                    recipient
                    subscriber
                    max_diff_lines
                    review_level"/>
  </class>
  <class class="lp.code.model.branchnamespace.PackageBranchNamespace">
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespace"/>
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespacePolicy"/>
  </class>
  <class class="lp.code.model.branchnamespace.PersonalBranchNamespace">
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespace"/>
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespacePolicy"/>
  </class>
  <class class="lp.code.model.branchnamespace.ProjectBranchNamespace">
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespace"/>
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespacePolicy"/>
  </class>
  <lp:securedutility
      class="lp.code.model.branchnamespace.BranchNamespaceSet"
      provides="lp.code.interfaces.branchnamespace.IBranchNamespaceSet">
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespaceSet"/>
  </lp:securedutility>
  <class class="lp.code.model.branchtarget.PackageBranchTarget">
    <allow interface="lp.code.interfaces.branchtarget.IBranchTarget"/>
  </class>
  <adapter
      for="lp.registry.interfaces.sourcepackage.ISourcePackage"
      provides="lp.code.interfaces.branchtarget.IBranchTarget"
      factory="lp.code.model.branchtarget.PackageBranchTarget"/>
  <adapter
      for="lp.registry.interfaces.distributionsourcepackage.IDistributionSourcePackage"
      provides="lp.code.interfaces.branchtarget.IBranchTarget"
      factory="lp.code.model.branchtarget.distribution_sourcepackage_to_branch_target"/>

  <class class="lp.code.model.branchtarget.PersonBranchTarget">
    <allow interface="lp.code.interfaces.branchtarget.IBranchTarget"/>
  </class>
  <adapter
      for="lp.registry.interfaces.person.IPerson"
      provides="lp.code.interfaces.branchtarget.IBranchTarget"
      factory="lp.code.model.branchtarget.PersonBranchTarget"/>

  <class class="lp.code.model.branchtarget.ProductBranchTarget">
    <allow interface="lp.code.interfaces.branchtarget.IBranchTarget"/>
  </class>
  <adapter
      for="lp.registry.interfaces.product.IProduct"
      provides="lp.code.interfaces.branchtarget.IBranchTarget"
      factory="lp.code.model.branchtarget.ProductBranchTarget"/>
  <adapter
      for="lp.registry.interfaces.productseries.IProductSeries"
      provides="lp.code.interfaces.branchtarget.IBranchTarget"
      factory="lp.code.model.branchtarget.product_series_to_branch_target"/>
  <adapter
      for="lp.code.interfaces.branchtarget.IBranchTarget"
      provides="lp.services.webapp.interfaces.ICanonicalUrlData"
      factory="lp.code.model.branchtarget.get_canonical_url_data_for_target"/>
  <class class="lp.code.model.branchrevision.BranchRevision">
    <allow interface="lp.code.interfaces.branchrevision.IBranchRevision"/>
  </class>

  <!-- Branch hosting -->
  <lp:securedutility
      class="lp.code.model.branchhosting.BranchHostingClient"
      provides="lp.code.interfaces.branchhosting.IBranchHostingClient">
    <allow interface="lp.code.interfaces.branchhosting.IBranchHostingClient" />
  </lp:securedutility>

  <!-- CodeReviewComment -->

  <class class="lp.code.model.codereviewcomment.CodeReviewComment">
    <require permission="launchpad.Owner"
             interface="lp.services.messages.interfaces.message.IMessageEdit" />
    <allow interface="lp.code.interfaces.codereviewcomment.ICodeReviewCommentView"/>
    <allow interface="lp.code.interfaces.branchtarget.IHasBranchTarget"/>
  </class>
  <subscriber
      for="lp.code.interfaces.codereviewcomment.ICodeReviewComment
           lazr.lifecycle.interfaces.IObjectCreatedEvent"
      handler="lp.code.mail.codereviewcomment.send"/>
  <subscriber
      for="lp.code.interfaces.codereviewcomment.ICodeReviewComment
           lazr.lifecycle.interfaces.IObjectCreatedEvent"
      handler="lp.code.subscribers.karma.code_review_comment_added"/>

  <!-- CodeReviewInlineComment -->

  <class class="lp.code.model.codereviewinlinecomment.CodeReviewInlineComment">
    <allow interface="lp.code.interfaces.codereviewinlinecomment.ICodeReviewInlineComment"/>
  </class>

  <!-- CodeReviewInlineCommentSet -->

  <lp:securedutility
      class="lp.code.model.codereviewinlinecomment.CodeReviewInlineCommentSet"
      provides="lp.code.interfaces.codereviewinlinecomment.ICodeReviewInlineCommentSet">
    <allow interface="lp.code.interfaces.codereviewinlinecomment.ICodeReviewInlineCommentSet"/>
  </lp:securedutility>
  <class class="lp.code.model.codereviewinlinecomment.CodeReviewInlineCommentSet">
    <allow interface="lp.code.interfaces.codereviewinlinecomment.ICodeReviewInlineCommentSet"/>
  </class>

  <!-- hierarchy -->

  <class class="lp.code.model.branchjob.BranchJob">
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <class class="lp.code.model.branchjob.RevisionMailJob">
    <allow interface="lp.code.interfaces.branchjob.IRevisionMailJob"/>
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <class class="lp.code.model.branchjob.RevisionsAddedJob">
    <allow interface="lp.code.interfaces.branchjob.IRevisionsAddedJob"/>
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <class class="lp.code.model.branchjob.RosettaUploadJob">
    <allow interface="lp.code.interfaces.branchjob.IRosettaUploadJob"/>
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <class class="lp.code.model.branchjob.ReclaimBranchSpaceJob">
    <allow interface="lp.code.interfaces.branchjob.IReclaimBranchSpaceJob"/>
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <class class="lp.code.model.branchjob.BranchModifiedMailJob">
    <allow interface="lp.code.interfaces.branchjob.IBranchModifiedMailJob"/>
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <lp:securedutility
      component="lp.code.model.branchjob.RevisionMailJob"
      provides="lp.code.interfaces.branchjob.IRevisionMailJobSource">
    <allow interface="lp.code.interfaces.branchjob.IRevisionMailJobSource"/>
  </lp:securedutility>
  <lp:securedutility
      component="lp.code.model.branchjob.RevisionsAddedJob"
      provides="lp.code.interfaces.branchjob.IRevisionsAddedJobSource">
    <allow interface="lp.code.interfaces.branchjob.IRevisionsAddedJobSource"/>
  </lp:securedutility>
  <lp:securedutility
      component="lp.code.model.branchjob.RosettaUploadJob"
      provides="lp.code.interfaces.branchjob.IRosettaUploadJobSource">
    <allow interface="lp.code.interfaces.branchjob.IRosettaUploadJobSource"/>
  </lp:securedutility>
  <lp:securedutility
      component="lp.code.model.branchjob.ReclaimBranchSpaceJob"
      provides="lp.code.interfaces.branchjob.IReclaimBranchSpaceJobSource">
    <allow interface="lp.code.interfaces.branchjob.IReclaimBranchSpaceJobSource"/>
  </lp:securedutility>
  <lp:securedutility
      component="lp.code.model.branchjob.BranchModifiedMailJob"
      provides="lp.code.interfaces.branchjob.IBranchModifiedMailJobSource">
    <allow interface="lp.code.interfaces.branchjob.IBranchModifiedMailJobSource"/>
  </lp:securedutility>

  <!-- CodeImport -->

  <class class="lp.code.model.codeimport.CodeImport">
    <implements interface="lp.code.interfaces.codeimport.ICodeImport"/>
    <allow attributes="id
                       date_created
                       branch
                       git_repository
                       target
                       registrant
                       owner
                       assignee
                       product
                       series
                       review_status
                       rcs_type
                       target_rcs_type
                       cvs_root
                       cvs_module
                       url
                       date_last_successful
                       source_product_series
                       update_interval
                       effective_update_interval
                       import_job
                       results
                       consecutive_failure_count
                       getImportDetailsForDisplay"/>
    <require
       permission="launchpad.Edit"
       attributes="updateURL setURL"/>

    <require
       permission="launchpad.AnyPerson"
       attributes="tryFailingImportAgain
                   requestImport"/>
    <require
       permission="launchpad.Moderate"
       attributes="updateFromData"/>

    <!-- ICodeImport has no set_schema, because all modifications should be
         done through methods that create CodeImportEvent objects when
         appropriate. -->

  </class>
  <adapter
      provides="lp.services.webapp.interfaces.IBreadcrumb"
      for="lp.code.interfaces.codeimport.ICodeImportSet"
      factory="lp.code.browser.codeimport.CodeImportSetBreadcrumb"
      permission="zope.Public"/>
  <subscriber
      for="lp.code.interfaces.codeimport.ICodeImport
           lazr.lifecycle.interfaces.IObjectCreatedEvent"
      handler="lp.code.mail.codeimport.new_import"/>

  <!-- CodeImportSet -->

  <lp:securedutility
      class="lp.code.model.codeimport.CodeImportSet"
      provides="lp.code.interfaces.codeimport.ICodeImportSet">
    <allow interface="lp.code.interfaces.codeimport.ICodeImportSet"/>
  </lp:securedutility>

  <!-- CodeImportJob -->

  <class class="lp.code.model.codeimportjob.CodeImportJob">
    <allow interface="lp.code.interfaces.codeimportjob.ICodeImportJob"/>
  </class>

  <!-- CodeImportJobSet -->

  <lp:securedutility
      class="lp.code.model.codeimportjob.CodeImportJobSet"
      provides="lp.code.interfaces.codeimportjob.ICodeImportJobSet">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.codeimportjob.ICodeImportJobSet"/>
    <allow interface="lp.code.interfaces.codeimportjob.ICodeImportJobSetPublic"/>
  </lp:securedutility>

  <!-- CodeImportJobWorkflow -->

  <lp:securedutility
      class="lp.code.model.codeimportjob.CodeImportJobWorkflow"
      provides="lp.code.interfaces.codeimportjob.ICodeImportJobWorkflow">
    <require
        permission="launchpad.Edit"
        attributes="
                    newJob
                    deletePendingJob
                    updateHeartbeat
                    finishJob"/>
    <require
        permission="launchpad.AnyPerson"
        attributes="
                    requestJob"/>

    <!-- XXX MichaelHudson 2008-02-28
         bug=196345: startJob is called
         by the getJobForMachine XML-RPC method, calls to which are
         unauthenticated.    When the above bug is fixed, we can
         restrict the permissions for this attribute. -->

    <allow attributes="
                    startJob
                    reclaimJob"/>
  </lp:securedutility>

  <!-- CodeImportJobMacaroonIssuer -->

  <lp:securedutility
      class="lp.code.model.codeimportjob.CodeImportJobMacaroonIssuer"
      provides="lp.services.macaroons.interfaces.IMacaroonIssuer"
      name="code-import-job">
    <allow interface="lp.services.macaroons.interfaces.IMacaroonIssuerPublic"/>
  </lp:securedutility>

  <!-- CodeImportEvent -->

  <class class="lp.code.model.codeimportevent.CodeImportEvent">
    <allow interface="lp.code.interfaces.codeimportevent.ICodeImportEvent"/>
  </class>

  <!-- CodeImportEventSet -->

  <lp:securedutility
      class="lp.code.model.codeimportevent.CodeImportEventSet"
      provides="lp.code.interfaces.codeimportevent.ICodeImportEventSet">
    <allow interface="lp.code.interfaces.codeimportevent.ICodeImportEventSet"/>
  </lp:securedutility>

  <!-- CodeImportEventToken -->

  <class class="lp.code.model.codeimportevent.CodeImportEventToken">
    <allow interface="lp.code.interfaces.codeimportevent.ICodeImportEventToken"/>
  </class>

  <class class="lp.code.model.revision.Revision">
    <allow interface="lp.code.interfaces.revision.IRevision"/>
  </class>

  <class class="lp.code.model.revision.RevisionAuthor">
    <allow interface="lp.code.interfaces.revision.IRevisionAuthor"/>
  </class>

  <class class="lp.code.model.revision.RevisionParent">
    <allow interface="lp.code.interfaces.revision.IRevisionParent" />
  </class>

  <class class="lp.code.model.revision.RevisionProperty">
    <allow interface="lp.code.interfaces.revision.IRevisionProperty" />
  </class>

  <!-- RevisionSet -->
  <class class="lp.code.model.revision.RevisionSet">
    <allow interface="lp.code.interfaces.revision.IRevisionSet" />
  </class>

  <lp:securedutility
      class="lp.code.model.revision.RevisionSet"
      provides="lp.code.interfaces.revision.IRevisionSet" >
    <allow interface="lp.code.interfaces.revision.IRevisionSet" />
  </lp:securedutility>


  <lp:securedutility
      component="lp.code.model.branchjob.BranchUpgradeJob"
      provides="lp.code.interfaces.branchjob.IBranchUpgradeJobSource">
    <allow interface="lp.code.interfaces.branchjob.IBranchUpgradeJobSource"/>
  </lp:securedutility>
  <class class="lp.code.model.branchjob.BranchUpgradeJob">
    <allow interface="lp.services.job.interfaces.job.IRunnableJob" />
  </class>

  <lp:securedutility
      component="lp.code.model.branchjob.BranchScanJob"
      provides="lp.code.interfaces.branchjob.IBranchScanJobSource">
    <allow interface="lp.code.interfaces.branchjob.IBranchScanJobSource"/>
  </lp:securedutility>
  <class class="lp.code.model.branchjob.BranchScanJob">
    <allow interface="lp.services.job.interfaces.job.IRunnableJob" />
    <allow interface="lp.code.interfaces.branchjob.IBranchJob" />
  </class>

  <!-- Linked branches -->
  <adapter factory="lp.code.model.linkedbranch.ProductSeriesLinkedBranch" />
  <adapter factory="lp.code.model.linkedbranch.ProductLinkedBranch" />
  <adapter factory="lp.code.model.linkedbranch.PackageLinkedBranch" />
  <adapter factory="lp.code.model.linkedbranch.DistributionPackageLinkedBranch" />

  <!-- GitRepository -->

  <class class="lp.code.model.gitrepository.GitRepository">
    <require
        permission="launchpad.View"
        interface="lp.app.interfaces.launchpad.IPrivacy
                   lp.code.interfaces.gitrepository.IGitRepositoryView
                   lp.code.interfaces.gitrepository.IGitRepositoryModerateAttributes
                   lp.code.interfaces.gitrepository.IGitRepositoryEditableAttributes
                   lp.code.interfaces.gitrepository.IGitRepositoryAdminAttributes" />
    <require
        permission="launchpad.Moderate"
        interface="lp.code.interfaces.gitrepository.IGitRepositoryModerate"
        set_schema="lp.code.interfaces.gitrepository.IGitRepositoryModerateAttributes"
        set_attributes="date_last_modified" />
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.gitrepository.IGitRepositoryEdit"
        set_schema="lp.code.interfaces.gitrepository.IGitRepositoryEditableAttributes" />
    <require
        permission="launchpad.ExpensiveRequest"
        interface="lp.code.interfaces.gitrepository.IGitRepositoryExpensiveRequest"/>
    <require
        permission="launchpad.Admin"
        set_schema="lp.code.interfaces.gitrepository.IGitRepositoryAdminAttributes" />
  </class>
  <adapter
      for="lp.registry.interfaces.product.IProduct"
      provides="lp.code.interfaces.gitrepository.IGitRepository"
      factory="lp.code.adapters.gitrepository.git_repository_for_project"/>
  <adapter
      for="lp.registry.interfaces.distributionsourcepackage.IDistributionSourcePackage"
      provides="lp.code.interfaces.gitrepository.IGitRepository"
      factory="lp.code.adapters.gitrepository.git_repository_for_distro_source_package"/>
  <adapter
      for="lp.registry.interfaces.ociproject.IOCIProject"
      provides="lp.code.interfaces.gitrepository.IGitRepository"
      factory="lp.code.adapters.gitrepository.git_repository_for_oci_project"/>
  <adapter
      for="lp.registry.interfaces.personproduct.IPersonProduct"
      provides="lp.code.interfaces.gitrepository.IGitRepository"
      factory="lp.code.adapters.gitrepository.git_repository_for_person_product"/>
  <adapter
      for="lp.registry.interfaces.persondistributionsourcepackage.IPersonDistributionSourcePackage"
      provides="lp.code.interfaces.gitrepository.IGitRepository"
      factory="lp.code.adapters.gitrepository.git_repository_for_person_distro_source_package"/>
  <adapter
      for="lp.registry.interfaces.personociproject.IPersonOCIProject"
      provides="lp.code.interfaces.gitrepository.IGitRepository"
      factory="lp.code.adapters.gitrepository.git_repository_for_person_oci_project"/>
  <adapter
      for="lp.code.interfaces.gitrepository.IGitRepository"
      provides="lp.services.webapp.interfaces.ILaunchpadContainer"
      factory="lp.code.publisher.LaunchpadGitRepositoryContainer"/>
  <subscriber
      for="lp.code.interfaces.gitrepository.IGitRepository zope.lifecycleevent.interfaces.IObjectModifiedEvent"
      handler="lp.code.model.gitrepository.git_repository_modified"/>
  <subscriber
      for="lp.code.interfaces.gitrepository.IGitRepository
           lp.code.interfaces.event.IGitRefsCreatedEvent"
      handler="lp.code.subscribers.git.refs_created"/>
  <subscriber
      for="lp.code.interfaces.gitrepository.IGitRepository
           lp.code.interfaces.event.IGitRefsUpdatedEvent"
      handler="lp.code.subscribers.git.refs_updated"/>

  <!-- GitRepositorySet -->

  <class class="lp.code.model.gitrepository.GitRepositorySet">
    <allow interface="lp.code.interfaces.gitrepository.IGitRepositorySet" />
  </class>
  <lp:securedutility
      class="lp.code.model.gitrepository.GitRepositorySet"
      provides="lp.code.interfaces.gitrepository.IGitRepositorySet">
    <allow interface="lp.code.interfaces.gitrepository.IGitRepositorySet" />
  </lp:securedutility>

  <!-- GitRepositoryMacaroonIssuer -->

  <lp:securedutility
      class="lp.code.model.gitrepository.GitRepositoryMacaroonIssuer"
      provides="lp.services.macaroons.interfaces.IMacaroonIssuer"
      name="git-repository">
    <allow interface="lp.services.macaroons.interfaces.IMacaroonIssuerPublic" />
  </lp:securedutility>

  <!-- GitRepositoryDelta -->

  <class class="lp.code.adapters.gitrepository.GitRepositoryDelta">
    <allow interface="lp.code.interfaces.gitrepository.IGitRepositoryDelta"/>
  </class>

  <!-- GitSubscription -->

  <class class="lp.code.model.gitsubscription.GitSubscription">
    <allow interface="lp.code.interfaces.gitsubscription.IGitSubscription"/>
    <require
        permission="launchpad.Edit"
        set_schema="lp.code.interfaces.gitsubscription.IGitSubscription"/>
  </class>

  <!-- GitNamespace -->

  <class class="lp.code.model.gitnamespace.PackageGitNamespace">
    <allow interface="lp.code.interfaces.gitnamespace.IGitNamespace" />
    <allow interface="lp.code.interfaces.gitnamespace.IGitNamespacePolicy" />
  </class>
  <class class="lp.code.model.gitnamespace.PersonalGitNamespace">
    <allow interface="lp.code.interfaces.gitnamespace.IGitNamespace" />
    <allow interface="lp.code.interfaces.gitnamespace.IGitNamespacePolicy" />
  </class>
  <class class="lp.code.model.gitnamespace.ProjectGitNamespace">
    <allow interface="lp.code.interfaces.gitnamespace.IGitNamespace" />
    <allow interface="lp.code.interfaces.gitnamespace.IGitNamespacePolicy" />
  </class>
  <class class="lp.code.model.gitnamespace.OCIProjectGitNamespace">
    <allow interface="lp.code.interfaces.gitnamespace.IGitNamespace" />
    <allow interface="lp.code.interfaces.gitnamespace.IGitNamespacePolicy" />
  </class>
  <lp:securedutility
      class="lp.code.model.gitnamespace.GitNamespaceSet"
      provides="lp.code.interfaces.gitnamespace.IGitNamespaceSet">
    <allow interface="lp.code.interfaces.gitnamespace.IGitNamespaceSet" />
  </lp:securedutility>

  <!-- GitRef -->

  <class class="lp.code.model.gitref.GitRef">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.gitref.IGitRefView" />
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.gitref.IGitRefEdit" />
  </class>
  <class class="lp.code.model.gitref.GitRefDefault">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.gitref.IGitRefView" />
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.gitref.IGitRefEdit" />
  </class>
  <class class="lp.code.model.gitref.GitRefFrozen">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.gitref.IGitRefView" />
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.gitref.IGitRefEdit" />
  </class>
  <class class="lp.code.model.gitref.GitRefRemote">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.gitref.IGitRefView" />
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.gitref.IGitRefEdit" />
  </class>
  <lp:securedutility
      component="lp.code.model.gitref.GitRefRemote"
      provides="lp.code.interfaces.gitref.IGitRefRemoteSet">
    <allow interface="lp.code.interfaces.gitref.IGitRefRemoteSet" />
  </lp:securedutility>

  <!-- RevisionStatusReport -->

  <class class="lp.code.model.revisionstatus.RevisionStatusReport">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.revisionstatus.IRevisionStatusReportView
                   lp.code.interfaces.revisionstatus.IRevisionStatusReportEditableAttributes" />
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.revisionstatus.IRevisionStatusReportEdit"
        set_schema="lp.code.interfaces.revisionstatus.IRevisionStatusReportEditableAttributes" />
  </class>
  <class class="lp.code.model.revisionstatus.RevisionStatusArtifact">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.revisionstatus.IRevisionStatusArtifact" />
  </class>
  <class class="lp.code.model.revisionstatus.RevisionStatusReportSet">
    <allow interface="lp.code.interfaces.revisionstatus.IRevisionStatusReportSet" />
  </class>
  <lp:securedutility
      class="lp.code.model.revisionstatus.RevisionStatusReportSet"
      provides="lp.code.interfaces.revisionstatus.IRevisionStatusReportSet">
     <allow interface="lp.code.interfaces.revisionstatus.IRevisionStatusReportSet" />
  </lp:securedutility>
  <class class="lp.code.model.revisionstatus.RevisionStatusArtifactSet">
    <allow interface="lp.code.interfaces.revisionstatus.IRevisionStatusArtifactSet" />
  </class>
  <lp:securedutility
      class="lp.code.model.revisionstatus.RevisionStatusArtifactSet"
      provides="lp.code.interfaces.revisionstatus.IRevisionStatusArtifactSet">
     <allow interface="lp.code.interfaces.revisionstatus.IRevisionStatusArtifactSet" />
  </lp:securedutility>

  <!-- Git repository access rules -->

  <class class="lp.code.model.gitrule.GitRule">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.gitrule.IGitRuleView
                   lp.code.interfaces.gitrule.IGitRuleEditableAttributes" />
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.gitrule.IGitRuleEdit"
        set_schema="lp.code.interfaces.gitrule.IGitRuleEditableAttributes" />
    <allow interface="lazr.restful.interfaces.IJSONPublishable" />
  </class>
  <subscriber
      for="lp.code.interfaces.gitrule.IGitRule zope.lifecycleevent.interfaces.IObjectModifiedEvent"
      handler="lp.code.model.gitrule.git_rule_modified"/>
  <class class="lp.code.model.gitrule.GitRuleGrant">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.gitrule.IGitRuleGrantView
                   lp.code.interfaces.gitrule.IGitRuleGrantEditableAttributes" />
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.gitrule.IGitRuleGrantEdit"
        set_schema="lp.code.interfaces.gitrule.IGitRuleGrantEditableAttributes" />
    <allow interface="lazr.restful.interfaces.IJSONPublishable" />
  </class>
  <subscriber
      for="lp.code.interfaces.gitrule.IGitRuleGrant zope.lifecycleevent.interfaces.IObjectModifiedEvent"
      handler="lp.code.model.gitrule.git_rule_grant_modified"/>
  <class class="lp.code.model.gitrule.GitNascentRule">
    <allow interface="lp.code.interfaces.gitrule.IGitNascentRule" />
  </class>
  <class class="lp.code.model.gitrule.GitNascentRuleGrant">
    <allow interface="lp.code.interfaces.gitrule.IGitNascentRuleGrant" />
  </class>
  <adapter factory="lp.code.model.gitrule.nascent_rule_from_dict" />
  <adapter factory="lp.code.model.gitrule.nascent_rule_grant_from_dict" />

  <!-- GitActivity -->

  <class class="lp.code.model.gitactivity.GitActivity">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.gitactivity.IGitActivity" />
  </class>
  <lp:securedutility
      class="lp.code.model.gitactivity.GitActivitySet"
      provides="lp.code.interfaces.gitactivity.IGitActivitySet">
    <allow interface="lp.code.interfaces.gitactivity.IGitActivitySet" />
  </lp:securedutility>

  <!-- GitCollection -->

  <class class="lp.code.model.gitcollection.GenericGitCollection">
    <allow interface="lp.code.interfaces.gitcollection.IGitCollection"/>
  </class>
  <class class="lp.code.model.gitcollection.AnonymousGitCollection">
    <allow interface="lp.code.interfaces.gitcollection.IGitCollection"/>
  </class>
  <class class="lp.code.model.gitcollection.VisibleGitCollection">
    <allow interface="lp.code.interfaces.gitcollection.IGitCollection"/>
  </class>
  <adapter
      for="storm.store.Store"
      provides="lp.code.interfaces.gitcollection.IGitCollection"
      factory="lp.code.model.gitcollection.GenericGitCollection"/>
  <adapter
      for="lp.registry.interfaces.product.IProduct"
      provides="lp.code.interfaces.gitcollection.IGitCollection"
      factory="lp.code.adapters.gitcollection.git_collection_for_project"/>
  <adapter
      for="lp.registry.interfaces.projectgroup.IProjectGroup"
      provides="lp.code.interfaces.gitcollection.IGitCollection"
      factory="lp.code.adapters.gitcollection.git_collection_for_project_group"/>
  <adapter
      for="lp.registry.interfaces.distribution.IDistribution"
      provides="lp.code.interfaces.gitcollection.IGitCollection"
      factory="lp.code.adapters.gitcollection.git_collection_for_distribution"/>
  <adapter
      for="lp.registry.interfaces.distributionsourcepackage.IDistributionSourcePackage"
      provides="lp.code.interfaces.gitcollection.IGitCollection"
      factory="lp.code.adapters.gitcollection.git_collection_for_distro_source_package"/>
  <adapter
      for="lp.registry.interfaces.ociproject.IOCIProject"
      provides="lp.code.interfaces.gitcollection.IGitCollection"
      factory="lp.code.adapters.gitcollection.git_collection_for_oci_project"/>
  <adapter
      for="lp.registry.interfaces.person.IPerson"
      provides="lp.code.interfaces.gitcollection.IGitCollection"
      factory="lp.code.adapters.gitcollection.git_collection_for_person"/>
  <adapter
      for="lp.registry.interfaces.personproduct.IPersonProduct"
      provides="lp.code.interfaces.gitcollection.IGitCollection"
      factory="lp.code.adapters.gitcollection.git_collection_for_person_product"/>
  <adapter
      for="lp.registry.interfaces.persondistributionsourcepackage.IPersonDistributionSourcePackage"
      provides="lp.code.interfaces.gitcollection.IGitCollection"
      factory="lp.code.adapters.gitcollection.git_collection_for_person_distro_source_package"/>
  <adapter
      for="lp.registry.interfaces.personociproject.IPersonOCIProject"
      provides="lp.code.interfaces.gitcollection.IGitCollection"
      factory="lp.code.adapters.gitcollection.git_collection_for_person_oci_project"/>
  <lp:securedutility
      class="lp.code.model.gitcollection.GenericGitCollection"
      provides="lp.code.interfaces.gitcollection.IAllGitRepositories">
    <allow interface="lp.code.interfaces.gitcollection.IAllGitRepositories"/>
  </lp:securedutility>

  <!-- Default Git repositories -->

  <adapter factory="lp.code.model.defaultgit.ProjectDefaultGitRepository" />
  <adapter factory="lp.code.model.defaultgit.PackageDefaultGitRepository" />
  <adapter factory="lp.code.model.defaultgit.OCIProjectDefaultGitRepository" />
  <adapter factory="lp.code.model.defaultgit.OwnerProjectDefaultGitRepository" />
  <adapter factory="lp.code.model.defaultgit.OwnerPackageDefaultGitRepository" />
  <adapter factory="lp.code.model.defaultgit.OwnerOCIProjectDefaultGitRepository" />

  <class class="lp.code.model.gitlookup.GitLookup">
    <allow interface="lp.code.interfaces.gitlookup.IGitLookup" />
  </class>
  <lp:securedutility
      class="lp.code.model.gitlookup.GitLookup"
      provides="lp.code.interfaces.gitlookup.IGitLookup">
    <allow interface="lp.code.interfaces.gitlookup.IGitLookup" />
  </lp:securedutility>
  <lp:securedutility
      class="lp.code.model.gitlookup.GitTraverser"
      provides="lp.code.interfaces.gitlookup.IGitTraverser">
    <allow interface="lp.code.interfaces.gitlookup.IGitTraverser" />
  </lp:securedutility>
  <adapter factory="lp.code.model.gitlookup.PersonGitTraversable" />
  <adapter factory="lp.code.model.gitlookup.ProjectGitTraversable" />
  <adapter factory="lp.code.model.gitlookup.DistributionGitTraversable" />
  <adapter factory="lp.code.model.gitlookup.DistributionSourcePackageGitTraversable" />
  <adapter factory="lp.code.model.gitlookup.DistributionOCIProjectGitTraversable" />

  <!-- Git hosting -->
  <lp:securedutility
      class="lp.code.model.githosting.GitHostingClient"
      provides="lp.code.interfaces.githosting.IGitHostingClient">
    <allow interface="lp.code.interfaces.githosting.IGitHostingClient" />
  </lp:securedutility>

  <!-- Git-related jobs -->
  <class class="lp.code.model.gitjob.GitJob">
    <allow interface="lp.code.interfaces.gitjob.IGitJob" />
  </class>
  <lp:securedutility
      component="lp.code.model.gitjob.GitRefScanJob"
      provides="lp.code.interfaces.gitjob.IGitRefScanJobSource">
    <allow interface="lp.code.interfaces.gitjob.IGitRefScanJobSource" />
  </lp:securedutility>
  <lp:securedutility
      component="lp.code.model.gitjob.ReclaimGitRepositorySpaceJob"
      provides="lp.code.interfaces.gitjob.IReclaimGitRepositorySpaceJobSource">
    <allow interface="lp.code.interfaces.gitjob.IReclaimGitRepositorySpaceJobSource" />
  </lp:securedutility>
  <lp:securedutility
      component="lp.code.model.gitjob.GitRepositoryModifiedMailJob"
      provides="lp.code.interfaces.gitjob.IGitRepositoryModifiedMailJobSource">
    <allow interface="lp.code.interfaces.gitjob.IGitRepositoryModifiedMailJobSource" />
  </lp:securedutility>
  <class class="lp.code.model.gitjob.GitRefScanJob">
    <allow interface="lp.code.interfaces.gitjob.IGitJob" />
    <allow interface="lp.code.interfaces.gitjob.IGitRefScanJob" />
  </class>
  <class class="lp.code.model.gitjob.ReclaimGitRepositorySpaceJob">
    <allow interface="lp.code.interfaces.gitjob.IGitJob" />
    <allow interface="lp.code.interfaces.gitjob.IReclaimGitRepositorySpaceJob" />
  </class>
  <class class="lp.code.model.gitjob.GitRepositoryModifiedMailJob">
    <allow interface="lp.code.interfaces.gitjob.IGitJob" />
    <allow interface="lp.code.interfaces.gitjob.IGitRepositoryModifiedMailJob" />
  </class>

  <lp:help-folder folder="help" name="+help-code" />

  <!-- Diffs -->
  <class class="lp.code.model.diff.Diff">
    <allow interface="lp.code.interfaces.diff.IDiff" />
  </class>
  <class class="lp.code.model.diff.IncrementalDiff">
    <allow interface="lp.code.interfaces.diff.IDiff" />
    <allow interface="lp.code.interfaces.diff.IIncrementalDiff" />
  </class>
  <class class="lp.code.model.diff.PreviewDiff">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.diff.IPreviewDiff"/>
  </class>

  <!-- SourcePackageRecipe -->

  <lp:securedutility
     component="lp.code.model.sourcepackagerecipe.SourcePackageRecipe"
     provides="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeSource">
    <allow interface="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeSource"/>

  </lp:securedutility>

  <class
     class="lp.code.model.sourcepackagerecipebuild.SourcePackageRecipeBuild">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuildView"/>
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuildEdit"/>
    <require
        permission="launchpad.Admin"
        interface="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuildAdmin"/>
  </class>

  <lp:securedutility
     component="lp.code.model.sourcepackagerecipebuild.SourcePackageRecipeBuild"
     provides="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuildSource">
    <allow interface="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuildSource"/>
  </lp:securedutility>

  <lp:securedutility
     component="lp.code.model.sourcepackagerecipebuild.SourcePackageRecipeBuild"
     provides="lp.buildmaster.interfaces.buildfarmjob.ISpecificBuildFarmJobSource"
     name="RECIPEBRANCHBUILD">
    <allow interface="lp.buildmaster.interfaces.buildfarmjob.ISpecificBuildFarmJobSource"/>
  </lp:securedutility>

  <adapter factory="lp.code.model.recipebuilder.RecipeBuildBehaviour"
           permission="zope.Public" />

  <!-- SourcePackageRecipeData -->
  <class
     class="lp.code.model.sourcepackagerecipedata.SourcePackageRecipeData">
    <require permission="launchpad.View"
    interface="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeData"/>
  </class>
  <utility
    component="lp.code.model.sourcepackagerecipedata.SourcePackageRecipeData"
    provides="lp.code.interfaces.sourcepackagerecipe.IRecipeBranchSource">
  </utility>
  <lp:securedutility
      component="lp.code.model.sourcepackagerecipedata.SourcePackageRecipeData"
      provides="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeDataSource">
    <allow interface="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeDataSource"/>
  </lp:securedutility>
  <!-- SourcePackageRecipe -->
  <class
     class="lp.code.model.sourcepackagerecipe.SourcePackageRecipe">
    <require permission="launchpad.View"
      interface="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeView
                 lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeEditableAttributes
                 lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeData"
      />
    <require
       permission="launchpad.Edit"
       interface="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeEdit"
       set_schema="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeEditableAttributes"
       set_attributes="builder_recipe date_last_modified"
        />
    <require
       permission="launchpad.Delete"
       interface="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeDelete"
       />
  </class>
  <class
     class="brzbuildrecipe.recipe.BaseRecipeBranch">
    <allow attributes="name url revspec revid child_branches deb_version __str__" />
  </class>
  <class
     class="brzbuildrecipe.recipe.RecipeBranch">
    <allow attributes="name url revspec revid child_branches __str__" />
  </class>
  <class
     class="brzbuildrecipe.recipe.MergeInstruction">
    <allow attributes="as_tuple recipe_branch nest_path" />
  </class>
  <class
     class="brzbuildrecipe.recipe.NestInstruction">
    <allow attributes="as_tuple recipe_branch nest_path" />
  </class>

  <subscriber
    for="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipe zope.lifecycleevent.interfaces.IObjectModifiedEvent"
    handler="lp.code.model.sourcepackagerecipe.recipe_modified"/>

  <!-- LPCIConfiguration -->
  <class class="lp.code.model.lpci.LPCIConfiguration">
    <allow interface="lp.code.interfaces.lpci.ILPCIConfiguration" />
  </class>

  <!-- CIBuild -->
  <class class="lp.code.model.cibuild.CIBuild">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.cibuild.ICIBuildView" />
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.cibuild.ICIBuildEdit" />
    <require
        permission="launchpad.Admin"
        interface="lp.code.interfaces.cibuild.ICIBuildAdmin" />
  </class>
  <subscriber
      for="lp.code.interfaces.cibuild.ICIBuild
           lazr.lifecycle.interfaces.IObjectCreatedEvent"
      handler="lp.code.subscribers.cibuild.ci_build_created" />
  <subscriber
      for="lp.code.interfaces.cibuild.ICIBuild
           lazr.lifecycle.interfaces.IObjectModifiedEvent"
      handler="lp.code.subscribers.cibuild.ci_build_modified" />

  <!-- CIBuildSet -->
  <lp:securedutility
      class="lp.code.model.cibuild.CIBuildSet"
      provides="lp.code.interfaces.cibuild.ICIBuildSet">
    <allow interface="lp.code.interfaces.cibuild.ICIBuildSet" />
  </lp:securedutility>
  <lp:securedutility
      class="lp.code.model.cibuild.CIBuildSet"
      provides="lp.buildmaster.interfaces.buildfarmjob.ISpecificBuildFarmJobSource"
      name="CIBUILD">
    <allow interface="lp.buildmaster.interfaces.buildfarmjob.ISpecificBuildFarmJobSource" />
  </lp:securedutility>

  <!-- CIBuildMacaroonIssuer -->
  <lp:securedutility
      class="lp.code.model.cibuild.CIBuildMacaroonIssuer"
      provides="lp.services.macaroons.interfaces.IMacaroonIssuer"
      name="ci-build">
    <allow interface="lp.services.macaroons.interfaces.IMacaroonIssuerPublic" />
  </lp:securedutility>

  <!-- CIBuildBehaviour -->
  <adapter
      for="lp.code.interfaces.cibuild.ICIBuild"
      provides="lp.buildmaster.interfaces.buildfarmjobbehaviour.IBuildFarmJobBehaviour"
      factory="lp.code.model.cibuildbehaviour.CIBuildBehaviour"
      permission="zope.Public" />

  <webservice:register module="lp.code.interfaces.webservice" />

  <adapter
    factory="lp.code.browser.sourcepackagerecipe.distroseries_renderer"
    name="distroseries"/>

</configure>
